version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: nova-pasta-postgres
    environment:
      POSTGRES_DB: nova_pasta
      POSTGRES_USER: nova_user
      POSTGRES_PASSWORD: nova_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - nova-pasta-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nova_user -d nova_pasta"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache & Sessions
  redis:
    image: redis:7-alpine
    container_name: nova-pasta-redis
    command: redis-server --appendonly yes --requirepass nova_redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - nova-pasta-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Admin UI
  redis-admin:
    image: erikdubbelboer/phpredisadmin:latest
    container_name: nova-pasta-redis-admin
    environment:
      REDIS_1_HOST: redis
      REDIS_1_PORT: 6379
      REDIS_1_AUTH: nova_redis_password
    ports:
      - "8081:80"
    depends_on:
      - redis
    networks:
      - nova-pasta-network

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: nova-pasta-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: nova_user
      RABBITMQ_DEFAULT_PASS: nova_password
      RABBITMQ_DEFAULT_VHOST: nova_pasta
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - nova-pasta-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend FastAPI
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: nova-pasta-backend
    environment:
      - DATABASE_URL=postgresql://nova_user:nova_password@postgres:5432/nova_pasta
      - REDIS_URL=redis://:nova_redis_password@redis:6379/0
      - RABBITMQ_URL=amqp://nova_user:nova_password@rabbitmq:5672/nova_pasta
      - SECRET_KEY=nova_pasta_secret_key_change_in_production
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
      - GITLAB_CLIENT_ID=${GITLAB_CLIENT_ID}
      - GITLAB_CLIENT_SECRET=${GITLAB_CLIENT_SECRET}
    volumes:
      - ./backend:/app
      - /app/__pycache__
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - nova-pasta-network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Celery Worker
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: nova-pasta-celery-worker
    environment:
      - DATABASE_URL=postgresql://nova_user:nova_password@postgres:5432/nova_pasta
      - REDIS_URL=redis://:nova_redis_password@redis:6379/0
      - RABBITMQ_URL=amqp://nova_user:nova_password@rabbitmq:5672/nova_pasta
      - CELERY_BROKER_URL=amqp://nova_user:nova_password@rabbitmq:5672/nova_pasta
      - CELERY_RESULT_BACKEND=redis://:nova_redis_password@redis:6379/0
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - nova-pasta-network
    command: celery -A app.celery_app worker --loglevel=info

  # Celery Beat (Scheduler)
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: nova-pasta-celery-beat
    environment:
      - DATABASE_URL=postgresql://nova_user:nova_password@postgres:5432/nova_pasta
      - REDIS_URL=redis://:nova_redis_password@redis:6379/0
      - RABBITMQ_URL=amqp://nova_user:nova_password@rabbitmq:5672/nova_pasta
      - CELERY_BROKER_URL=amqp://nova_user:nova_password@rabbitmq:5672/nova_pasta
      - CELERY_RESULT_BACKEND=redis://:nova_redis_password@redis:6379/0
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - nova-pasta-network
    command: celery -A app.celery_app beat --loglevel=info

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: nova-pasta-frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000
      - REACT_APP_GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - REACT_APP_GITLAB_CLIENT_ID=${GITLAB_CLIENT_ID}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - nova-pasta-network
    command: npm run dev

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: nova-pasta-nginx
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    networks:
      - nova-pasta-network

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:

networks:
  nova-pasta-network:
    driver: bridge
